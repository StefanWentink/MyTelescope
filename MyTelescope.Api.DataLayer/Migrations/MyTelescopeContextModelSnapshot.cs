// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MyTelescope.Api.DataLayer.Context;
using System;

namespace MyTelescope.Api.DataLayer.Migrations
{
    [DbContext(typeof(MyTelescopeContext))]
    partial class MyTelescopeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyTelescope.SolarSystem.Models.CelestialObject.CelestialObject", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<double>("Aphelion");

                    b.Property<double>("BlackBodyTemperature");

                    b.Property<Guid?>("CelestialObjectId");

                    b.Property<Guid>("CelestialObjectTypeId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("ColorCode")
                        .IsRequired();

                    b.Property<double>("EquatorialRadius");

                    b.Property<double>("EscapeVelocity");

                    b.Property<double>("Gravity");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<bool>("InferiorOrbit");

                    b.Property<double>("LengthOfDay");

                    b.Property<double>("Mass");

                    b.Property<double>("MaximumApparentDiameter");

                    b.Property<double>("MaximumDistance");

                    b.Property<double>("MaximumVisualMagnitude");

                    b.Property<double>("MeanDensity");

                    b.Property<double>("MinimumApparentDiameter");

                    b.Property<double>("MinimumDistance");

                    b.Property<double>("OppositionDistance");

                    b.Property<double>("OrbitalEccentricity");

                    b.Property<double>("Perihelion");

                    b.Property<double>("PolarRadius");

                    b.Property<bool>("RingSystem");

                    b.Property<int>("Satellites");

                    b.Property<double>("SemiMajorAxis");

                    b.Property<double>("SiderealOrbitPeriod");

                    b.Property<double>("SiderealRotationPeriod");

                    b.Property<double>("SolarIrradiance");

                    b.Property<double>("SurfaceAcceleration");

                    b.Property<double>("SynodicPeriod");

                    b.Property<double>("TopographicRange");

                    b.Property<double>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("CelestialObjectId");

                    b.HasIndex("CelestialObjectTypeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CelestialObject");
                });

            modelBuilder.Entity("MyTelescope.SolarSystem.Models.CelestialObject.CelestialObjectPositionModel", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<double>("AverageCentricDistance");

                    b.Property<Guid>("CelestialObjectId");

                    b.Property<double>("CentricDistance");

                    b.Property<double>("Declination");

                    b.Property<double>("EclipticLatitude");

                    b.Property<double>("EclipticLongitude");

                    b.Property<double>("LargeDeltaEarthDistance");

                    b.Property<double>("MeanAnomaly");

                    b.Property<double>("RatioEarthAuDistance");

                    b.Property<double>("RatioSunEarthDistance");

                    b.Property<DateTimeOffset>("ReferenceDate");

                    b.Property<double>("RightAscension");

                    b.Property<double>("X");

                    b.Property<double>("Y");

                    b.Property<double>("Z");

                    b.HasKey("Id");

                    b.HasIndex("CelestialObjectId", "ReferenceDate")
                        .IsUnique();

                    b.ToTable("CelestialObjectPosition");
                });

            modelBuilder.Entity("MyTelescope.SolarSystem.Models.CelestialObject.CelestialObjectType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CelestialObjectType");
                });

            modelBuilder.Entity("MyTelescope.SolarSystem.Models.CelestialObject.CelestialObject", b =>
                {
                    b.HasOne("MyTelescope.SolarSystem.Models.CelestialObject.CelestialObject", "CelestialObject")
                        .WithMany()
                        .HasForeignKey("CelestialObjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyTelescope.SolarSystem.Models.CelestialObject.CelestialObjectType", "CelestialObjectType")
                        .WithMany("CelestialObjects")
                        .HasForeignKey("CelestialObjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MyTelescope.SolarSystem.Models.CelestialObject.CelestialObjectPositionModel", b =>
                {
                    b.HasOne("MyTelescope.SolarSystem.Models.CelestialObject.CelestialObject", "CelestialObject")
                        .WithMany("CelestialObjectPositions")
                        .HasForeignKey("CelestialObjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
